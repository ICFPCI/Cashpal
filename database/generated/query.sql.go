// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO Accounts (
  user_id, account_name, account_type
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, account_name, account_type, created_at, updated_at
`

type CreateAccountParams struct {
	UserID      int32  `json:"user_id"`
	AccountName string `json:"account_name"`
	AccountType string `json:"account_type"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.UserID, arg.AccountName, arg.AccountType)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountName,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAccountEvent = `-- name: CreateAccountEvent :one
INSERT INTO Account_Events (
  account_id, event_type_id, description
) VALUES (
  $1, $2, $3
)
RETURNING id, account_id, event_type_id, description, created_at, updated_at
`

type CreateAccountEventParams struct {
	AccountID   int32  `json:"account_id"`
	EventTypeID int32  `json:"event_type_id"`
	Description string `json:"description"`
}

func (q *Queries) CreateAccountEvent(ctx context.Context, arg CreateAccountEventParams) (AccountEvent, error) {
	row := q.db.QueryRow(ctx, createAccountEvent, arg.AccountID, arg.EventTypeID, arg.Description)
	var i AccountEvent
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.EventTypeID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createMember = `-- name: CreateMember :one
INSERT INTO Members (
  account_id, user_id, member_role_id
)
VALUES (
  $1, $2, $3
)
RETURNING id, account_id, user_id, member_role_id, created_at, updated_at
`

type CreateMemberParams struct {
	AccountID    int32 `json:"account_id"`
	UserID       int32 `json:"user_id"`
	MemberRoleID int32 `json:"member_role_id"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRow(ctx, createMember, arg.AccountID, arg.UserID, arg.MemberRoleID)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.MemberRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO Transactions (
  account_id, user_id, transaction_date, transaction_type_id, amount, description
)
VALUES(
  $1, $2, $3, $4, $5, $6
)
returning id, account_id, user_id, transaction_date, transaction_type_id, amount, created_at, updated_at, description
`

type CreateTransactionParams struct {
	AccountID         int32       `json:"account_id"`
	UserID            int32       `json:"user_id"`
	TransactionDate   pgtype.Date `json:"transaction_date"`
	TransactionTypeID int32       `json:"transaction_type_id"`
	Amount            float64     `json:"amount"`
	Description       string      `json:"description"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.AccountID,
		arg.UserID,
		arg.TransactionDate,
		arg.TransactionTypeID,
		arg.Amount,
		arg.Description,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.TransactionDate,
		&i.TransactionTypeID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO Users (
  username, password
) VALUES (
  $1, $2
)
RETURNING id, username, password, created_at, updated_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM Accounts
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const deleteAccountEvent = `-- name: DeleteAccountEvent :exec
DELETE FROM Account_Events
WHERE id = $1
`

func (q *Queries) DeleteAccountEvent(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAccountEvent, id)
	return err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM Members
WHERE account_id = $1 and user_id = $2
`

type DeleteMemberParams struct {
	AccountID int32 `json:"account_id"`
	UserID    int32 `json:"user_id"`
}

func (q *Queries) DeleteMember(ctx context.Context, arg DeleteMemberParams) error {
	_, err := q.db.Exec(ctx, deleteMember, arg.AccountID, arg.UserID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM Users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getAccount = `-- name: GetAccount :one

SELECT id, user_id, account_name, account_type, created_at, updated_at FROM Accounts
WHERE id = $1 LIMIT 1
`

// ACCOUNTS
func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountName,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountEvent = `-- name: GetAccountEvent :one

SELECT id, account_id, event_type_id, description, created_at, updated_at FROM Account_Events
WHERE id = $1 LIMIT 1
`

// ACCOUNT_EVENTS
func (q *Queries) GetAccountEvent(ctx context.Context, id int32) (AccountEvent, error) {
	row := q.db.QueryRow(ctx, getAccountEvent, id)
	var i AccountEvent
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.EventTypeID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMember = `-- name: GetMember :one

SELECT id, account_id, user_id, member_role_id, created_at, updated_at FROM Members
WHERE account_id = $1 and user_id = $2 LIMIT 1
`

type GetMemberParams struct {
	AccountID int32 `json:"account_id"`
	UserID    int32 `json:"user_id"`
}

// MEMBERS
func (q *Queries) GetMember(ctx context.Context, arg GetMemberParams) (Member, error) {
	row := q.db.QueryRow(ctx, getMember, arg.AccountID, arg.UserID)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.MemberRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one

SELECT id, account_id, user_id, transaction_date, transaction_type_id, amount, created_at, updated_at, description FROM Transactions
WHERE id = $1 LIMIT 1
`

// TRANSACTIONS
func (q *Queries) GetTransaction(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.TransactionDate,
		&i.TransactionTypeID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT id, username, password, created_at, updated_at FROM Users
WHERE id = $1 LIMIT 1
`

// USERS
func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, created_at, updated_at FROM Users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAccount = `-- name: ListAccount :many
SELECT id, user_id, account_name, account_type, created_at, updated_at FROM Accounts
ORDER BY id
`

func (q *Queries) ListAccount(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccountName,
			&i.AccountType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountByUser = `-- name: ListAccountByUser :many
SELECT id, user_id, account_name, account_type, created_at, updated_at FROM Accounts
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListAccountByUser(ctx context.Context, userID int32) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccountByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.AccountName,
			&i.AccountType,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountEvent = `-- name: ListAccountEvent :many
SELECT id, account_id, event_type_id, description, created_at, updated_at FROM Account_Events
ORDER BY id
`

func (q *Queries) ListAccountEvent(ctx context.Context) ([]AccountEvent, error) {
	rows, err := q.db.Query(ctx, listAccountEvent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountEvent
	for rows.Next() {
		var i AccountEvent
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EventTypeID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountEventByAccount = `-- name: ListAccountEventByAccount :many
SELECT id, account_id, event_type_id, description, created_at, updated_at FROM Account_Events
WHERE account_id = $1
ORDER BY id
`

func (q *Queries) ListAccountEventByAccount(ctx context.Context, accountID int32) ([]AccountEvent, error) {
	rows, err := q.db.Query(ctx, listAccountEventByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountEvent
	for rows.Next() {
		var i AccountEvent
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.EventTypeID,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMember = `-- name: ListMember :many
SELECT id, account_id, user_id, member_role_id, created_at, updated_at FROM Members
ORDER BY id
`

func (q *Queries) ListMember(ctx context.Context) ([]Member, error) {
	rows, err := q.db.Query(ctx, listMember)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.UserID,
			&i.MemberRoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMemberByAccount = `-- name: ListMemberByAccount :many
SELECT id, account_id, user_id, member_role_id, created_at, updated_at FROM Members
WHERE account_id = $1
ORDER BY id
`

func (q *Queries) ListMemberByAccount(ctx context.Context, accountID int32) ([]Member, error) {
	rows, err := q.db.Query(ctx, listMemberByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.UserID,
			&i.MemberRoleID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransaction = `-- name: ListTransaction :many
SELECT id, account_id, user_id, transaction_date, transaction_type_id, amount, created_at, updated_at, description FROM Transactions
ORDER BY id
`

func (q *Queries) ListTransaction(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransaction)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.UserID,
			&i.TransactionDate,
			&i.TransactionTypeID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionByAccount = `-- name: ListTransactionByAccount :many
SELECT id, account_id, user_id, transaction_date, transaction_type_id, amount, created_at, updated_at, description FROM Transactions
WHERE account_id = $1
ORDER BY id
`

func (q *Queries) ListTransactionByAccount(ctx context.Context, accountID int32) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, listTransactionByAccount, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.UserID,
			&i.TransactionDate,
			&i.TransactionTypeID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, password, created_at, updated_at FROM Users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE Accounts
  set account_name = $2, account_type = $3, updated_at = NOW() AT TIME ZONE 'utc'
WHERE id = $1
RETURNING id, user_id, account_name, account_type, created_at, updated_at
`

type UpdateAccountParams struct {
	ID          int32  `json:"id"`
	AccountName string `json:"account_name"`
	AccountType string `json:"account_type"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount, arg.ID, arg.AccountName, arg.AccountType)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccountName,
		&i.AccountType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAccountEvent = `-- name: UpdateAccountEvent :one
UPDATE Account_Events
  set description = $2, updated_at = NOW() AT TIME ZONE 'utc'
WHERE id = $1
RETURNING id, account_id, event_type_id, description, created_at, updated_at
`

type UpdateAccountEventParams struct {
	ID          int32  `json:"id"`
	Description string `json:"description"`
}

func (q *Queries) UpdateAccountEvent(ctx context.Context, arg UpdateAccountEventParams) (AccountEvent, error) {
	row := q.db.QueryRow(ctx, updateAccountEvent, arg.ID, arg.Description)
	var i AccountEvent
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.EventTypeID,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMember = `-- name: UpdateMember :one
UPDATE Members
  set member_role_id = $3, updated_at = NOW() AT TIME ZONE 'utc'
WHERE account_id = $1 and user_id = $2
RETURNING id, account_id, user_id, member_role_id, created_at, updated_at
`

type UpdateMemberParams struct {
	AccountID    int32 `json:"account_id"`
	UserID       int32 `json:"user_id"`
	MemberRoleID int32 `json:"member_role_id"`
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRow(ctx, updateMember, arg.AccountID, arg.UserID, arg.MemberRoleID)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.MemberRoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE Transactions
  SET amount = $2, description = $3, updated_at = NOW() AT TIME ZONE 'utc'
  WHERE id = $1
  RETURNING id, account_id, user_id, transaction_date, transaction_type_id, amount, created_at, updated_at, description
`

type UpdateTransactionParams struct {
	ID          int32   `json:"id"`
	Amount      float64 `json:"amount"`
	Description string  `json:"description"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, updateTransaction, arg.ID, arg.Amount, arg.Description)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.UserID,
		&i.TransactionDate,
		&i.TransactionTypeID,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE Users
  set password = $2, updated_at = NOW() AT TIME ZONE 'utc'
WHERE id = $1
RETURNING id, username, password, created_at, updated_at
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
